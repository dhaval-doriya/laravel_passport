<?php

namespace App\Http\Controllers;

use App\Models\Customer;
use App\Models\User;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Stripe\Charge;
use Stripe\Stripe;
use Stripe\Token;

class PaymentController extends Controller
{

    public function processPayment(Request $request)
    {

        Stripe::setApiKey(env('STRIPE_SECRET'));

        $token = $request->stripeToken;

        try {
            $charge = Charge::create([
                'amount' => 1000, // amount in cents
                'currency' => 'usd',
                'description' => 'Example Charge',
                'source' => $token,
            ]);

            dd(   $charge);

            return redirect('/payment/success');
        } catch (Exception $e) {
            return redirect('/payment/failure');
        }
    }

    public function addcard(Request $request)
    {

        // $token = $this->generateToken($request);

        // dd($token);
        // stripe_id
        $user = Customer::find($request->user_id)->first();
        // $stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));

        $stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));
        $customer = $stripe->customers->retrieve($user->stripe_id);


        // 'source'  => $request->stripeToken

        $token = Token::create([
            "card" => [
                "number" =>  $request->card_number,
                "exp_month" => $request->exp_month,
                "exp_year" => $request->exp_year,
                "cvc" =>  $request->cvv
            ]
        ]);


        $customer->sources->create(['source' => $token]);



        $charge = Charge::create(array(
            'customer' => $customer->id,
            'amount'   => 10,
            'currency' => 'usd'
        ));


        dd($charge);
        // $customer = Customer::find($request->user_id)->first();

        // $stripe->customers->createSource($request->token, ['source' => 'tok_visa']);


        // Stripe::setApiKey(env('STRIPE_SECRET'));



        // $customer->updateCard($request->token);
        // $customer->updateCardFromStripe();

        // Stripe::setApiKey(env('STRIPE_SECRET'));

        // // Create a new customer in Stripe
        // $customer = Customer::create([
        //     'email' => $request->input('email'), // Customer's email address
        //     'source' => $request->input('stripeToken'), // Token generated by Stripe.js or Stripe Elements
        // ]);

        // // Optionally, you can retrieve the customer's ID and card details for further use
        // $customerId = $customer->id;
        // $card = $customer->sources->data[0]; // Assuming the customer only has one card

        // Return success response to the client
        // Log::info($token);
        return response()->json(['success' => true, 'message' => 'Customer created successfully', 'card' => $token]);
        return view('payment.success');
    }


    public function getTransactions()
    {
        $stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));
        $data = $stripe->charges->all();
        return response()->json([
            'type' => 'sucess',
            'data' => $data
        ]);
    }

    public function createCustomer(Request $request, Customer $customer)
    {
        $stripeCustomer = $customer->createOrGetStripeCustomer();
    }


    public function generateToken(Request $request)
    {
        // $response = Http::withBasicAuth(env('STRIPE_SECRET'), '')->post('https://api.stripe.com/v1/tokens', [
        //     'card' => [
        //         'number' => $request->input('card_number'),
        //         'exp_month' => $request->input('exp_month'),
        //         'exp_year' => $request->input('exp_year'),
        //         'cvc' => $request->input('cvc'),
        //     ],
        // ]);

        // Data to send to Stripe API
        $data = [
            'card[number]' => $request->input('card_number'),
            'card[exp_month]' => $request->input('exp_month'),
            'card[exp_year]' => $request->input('exp_year'),
            'card[cvc]' => $request->input('cvv'),
        ];

        // Send POST request to Stripe API
        // $response = Http::asForm()->post('https://api.stripe.com/v1/tokens', $data, [
        //     'Authorization' => 'Bearer ' . env('STRIPE_SECRET'),
        //     'Content-Type' => 'application/x-www-form-urlencoded',
        // ]);

        $response = Http::withHeaders([
            'Authorization' => 'Bearer ' . env('STRIPE_SECRET'),
            'Content-Type' => 'application/x-www-form-urlencoded',
        ])->post('https://api.stripe.com/v1/tokens', $data);


        // Check if the request was successful
        if ($response->successful()) {
            $token = $response->json('id');
            return $token;
            // Do something with the token, such as storing it in the database or using it for a payment
            return response()->json(['token' => $token]);
        } else {
            // Request failed, handle the error
            $errorMessage = $response->json('error.message');
            return response()->json(['error' => $errorMessage], $response->status());
        }
    }
}
